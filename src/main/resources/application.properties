spring.application.name=api-gateway
server.port=8765

eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka

#In the previous step, we launched up our Spring Cloud API gateway. One of the things we did earlier is we registered the API gateway with the Eureka naming server.
#The port on which we launched up API gateway is 8765. One interesting thing that you would observe is if I use a URL like this for talking to the currency exchange service.

#Let's see how the currency exchange service is registered on eureka server - localhost:8761. It's registered with the name CURRENCY-EXCHANGE.
#So from Eureka, we are picking up the name for currency exchange, and we are picking up the path to the currency exchange service.

#Make sure that currency exchange service is up and running. The URL which is exposed from currency exchange - localhost:8000/currency-exchange/from/USD/to/INR

#We would pick up the URL of currency exchange and add to name for currency exchange on eureka server to make following url from api gateway- localhost:8765/CURRENCY-EXCHANGE/currency-exchange/from/USD/to/INR
#8765 port in above url is the port of our API gateway.

#Let's see what would happen if I execute this. Oops, error. It says not found.

#We are passing in the name that currency exchange is registered with eureka within our url, and we would want the API gateway to talk to Eureka with that name,
#find the server location, and then execute requests to this URL. However, as we see, it's not enabled yet. To enable this feature in Spring Cloud API gateway,
#we need to add in following application property in our application.properties of API gateway  -

#    spring.cloud.gateway.discovery.locator.enabled = true.

#By default, this is disabled and we would want to enable service discovery by using Discovery Client.
#This is possible because in our pom.xml, we already have netflix-eureka-client, and the API gateway is already registered with Eureka, and it can discover other services also from Eureka.

#Now refresh the above URL - localhost:8765/CURRENCY-EXCHANGE/currency-exchange/from/USD/to/INR. It's working as-is without a problem,

#So now, whenever you have a client for the currency exchange, you can actually give them above URL and you can implement all the common features in your API gateway.
#And the API gateway would take care of the common features and then invoke the currency exchange.

#Similarly, we can create the URL for the currency conversion service as well. So we have couple of URLs which are exposed from the currency conversion service.
#It would be like -
#                       http://localhost:8765/CURRENCY-CONVERSION/currency-conversion/from/USD/to/INR/quantity/10
#                       http://localhost:8765/CURRENCY-CONVERSION/currency-conversion-feign/from/USD/to/INR/quantity/10

#So this is all working fine. So you can see that now you can call any microservice which is registered with Eureka through the API gateway.
#If you want to implement things like authentication, you can implement them on API gateway and you can only allow those things which are authenticated in your microservices.

#So all the authentication logic can be implemented on the API gateway.

#Now, we see in above URL that part in Capital letter which is actually the name with which microservices are registered with Eureka, does not really look good.
#CURRENCY-CONVERSION and CURRENCY-EXCHANGE are the only ones which is standing out from these specific URL patterns.
#To fix that, we add following configuration properties in API Gateway application.properties -

#   spring.cloud.gateway.discovery.locator.lower-case-service-id=true

#What we need to use small case for everything. So the URLs now would actually shift out to all lower case. URLs now will look something like this -
#
#           http://localhost:8765/currency-exchange/currency-exchange/from/USD/to/INR
#           http://localhost:8765/currency-conversion/currency-conversion/from/USD/to/INR/quantity/10
#           http://localhost:8765/currency-conversion/currency-conversion-feign/from/USD/to/INR/quantity/10
#
#Now the URL looks better. It's not perfect yet. We'll see what we can do to make it perfect in the next step. But it looks better than what it was earlier.
#In this step, we learned how we can proxy through the API gateway to other microservices using Eureka using the cloud gateway discovery locator feature.
#Let's explore this further in the next step.


spring.cloud.gateway.discovery.locator.enabled=true
#spring.cloud.gateway.discovery.locator.lower-case-service-id=true

spring.sleuth.sampler.probability=1.0